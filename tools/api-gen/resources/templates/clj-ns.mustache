(ns {{{ns-name}}}{{{ns-docstring}}}{{{enter}}}(:refer-clojure :only [defmacro defn apply declare meta let])
(:require [chromex-lib.wrapgen :refer [gen-wrap-from-table]]
[chromex-lib.callgen :refer [gen-call-from-table gen-tap-all-call]]
[chromex-lib.config :refer [get-static-config gen-active-config]]))

(declare api-table)
(declare gen-call)

{{#has-properties}}; -- properties -------------------------------------------------------------------------------------------------------------{{/has-properties}}
{{#properties}}{{{enter}}}{{>clj-property}}{{/properties}}
{{{enter}}}
{{#has-functions}}; -- functions --------------------------------------------------------------------------------------------------------------{{/has-functions}}
{{#functions}}{{{enter}}}{{>clj-function}}{{/functions}}
{{{enter}}}
{{#has-events}}; -- events -----------------------------------------------------------------------------------------------------------------{{/has-events}}
{{#events}}{{{enter}}}{{>clj-event}}{{/events}}
{{{enter}}}

; -- convenience ------------------------------------------------------------------------------------------------------------

(defmacro tap-all-events [chan]
(let [static-config (get-static-config)
      config (gen-active-config static-config)]
(gen-tap-all-call static-config api-table (meta &form) config chan)))

; ---------------------------------------------------------------------------------------------------------------------------
; -- API TABLE --------------------------------------------------------------------------------------------------------------
; ---------------------------------------------------------------------------------------------------------------------------

(def api-table
{{{api-table}}})

; -- helpers ----------------------------------------------------------------------------------------------------------------

; code generation for native API wrapper
(defmacro gen-wrap [kind item-id config & args]
(let [static-config (get-static-config)]
(apply gen-wrap-from-table static-config api-table kind item-id config args)))

; code generation for API call-site
(defn gen-call [kind item src-info & args]
(let [static-config (get-static-config)
      config (gen-active-config static-config)]
(apply gen-call-from-table static-config api-table kind item src-info config args)))